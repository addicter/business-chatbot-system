import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import jwt from 'jsonwebtoken';
import multer from 'multer';
import path from 'path';
import { fileURLToPath } from 'node:url';
import { promises as fs } from 'fs';

// Import our modules
import { 
  createBusiness, getBusinessBySlug, updateBusiness, getAllBusinesses,
  saveDocument, saveChunk, createSession, updateSession, saveMessage,
  getSessionHistory, createLead, getBusinessAnalytics, getBusinessDocuments
} from './lib/database.mjs';

import { FileProcessor } from './lib/file-processor.mjs';
import { aiSystem } from './lib/ai-system.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const app = express();

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.static('public'));
app.use('/admin', express.static('admin'));

// File upload configuration
const upload = multer({
  dest: 'uploads/',
  limits: {
    fileSize: (process.env.MAX_FILE_SIZE_MB || 10) * 1024 * 1024, // MB to bytes
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['pdf', 'csv', 'txt', 'docx', 'xlsx', 'xls'];
    const fileExt = file.originalname.split('.').pop()?.toLowerCase();
    
    if (allowedTypes.includes(fileExt)) {
      cb(null, true);
    } else {
      cb(new Error(`Unsupported file type: ${fileExt}. Allowed: ${allowedTypes.join(', ')}`));
    }
  }
});

// Configuration
const PORT = process.env.PORT || 8080;
const JWT_SECRET = process.env.APP_JWT_SECRET || 'your_secret_key';
const SESSION_TIMEOUT = (process.env.SESSION_TIMEOUT_HOURS || 2) + 'h';

// Utility functions
function generateApiKey() {
  return Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2);
}

function createSessionToken(businessId, sessionId) {
  return jwt.sign({ businessId, sessionId }, JWT_SECRET, { expiresIn: SESSION_TIMEOUT });
}

function verifySessionToken(req, res, next) {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: 'No session token provided' });
  }
  
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.session = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Invalid or expired session token' });
  }
}

// Routes

// Home page
app.get('/', (req, res) => {
  const protocol = req.headers['x-forwarded-proto'] || req.protocol;
  const host = req.get('host');
  const baseUrl = `${protocol}://${host}`;
  
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Business Chatbot System</title>
      <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
          font-family: system-ui, -apple-system, sans-serif; 
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          min-height: 100vh; color: white; padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .hero { text-align: center; padding: 60px 0; }
        .hero h1 { font-size: 3rem; margin-bottom: 20px; }
        .hero p { font-size: 1.2rem; opacity: 0.9; margin-bottom: 40px; }
        .features { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 30px; margin: 60px 0; }
        .feature { background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; backdrop-filter: blur(10px); }
        .feature h3 { font-size: 1.5rem; margin-bottom: 15px; }
        .cta { text-align: center; margin: 60px 0; }
        .btn { 
          display: inline-block; padding: 15px 30px; background: #4CAF50; 
          color: white; text-decoration: none; border-radius: 25px; 
          font-weight: bold; margin: 10px; transition: transform 0.2s;
        }
        .btn:hover { transform: translateY(-2px); }
        .btn-secondary { background: #2196F3; }
        .demo-section { background: rgba(255,255,255,0.1); padding: 40px; border-radius: 15px; margin: 40px 0; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="hero">
          <h1>🚀 Business Chatbot System</h1>
          <p>Create intelligent chatbots for your business with file uploads, lead capture, and email notifications</p>
        </div>
        
        <div class="features">
          <div class="feature">
            <h3>📄 File Upload Support</h3>
            <p>Upload your business data in PDF, CSV, Excel, or text files. Our AI processes and learns from your content automatically.</p>
          </div>
          <div class="feature">
            <h3>🤖 Intelligent AI Chat</h3>
            <p>Natural conversations powered by GPT-4. Your customers get helpful, accurate responses about your business.</p>
          </div>
          <div class="feature">
            <h3>🎯 Lead Generation</h3>
            <p>Automatic lead capture with contact forms and instant email notifications to your Gmail.</p>
          </div>
          <div class="feature">
            <h3>📊 Business Analytics</h3>
            <p>Track conversations, leads, conversion rates, and customer insights with detailed analytics.</p>
          </div>
          <div class="feature">
            <h3>🌐 Unique URLs</h3>
            <p>Each business gets a unique chatbot URL to share with customers: ${baseUrl}/chat/your-business</p>
          </div>
          <div class="feature">
            <h3>📧 Email Integration</h3>
            <p>Get chat logs and lead notifications sent to your Gmail automatically. Never miss a potential customer.</p>
          </div>
        </div>
        
        <div class="cta">
          <a href="/admin" class="btn">🎛️ Admin Dashboard</a>
          <a href="/admin/setup.html" class="btn btn-secondary">⚡ Quick Setup</a>
        </div>
        
        <div class="demo-section">
          <h2 style="text-align: center; margin-bottom: 30px;">🎮 Try Demo Chatbots</h2>
          <div style="text-align: center;">
            <a href="/chat/demo-tech-institute" class="btn">💻 Tech Institute Demo</a>
            <a href="/chat/demo-design-academy" class="btn btn-secondary">🎨 Design Academy Demo</a>
          </div>
          <p style="text-align: center; margin-top: 20px; opacity: 0.8;">
            These are sample businesses to show you how the system works
          </p>
        </div>
      </div>
    </body>
    </html>
  `);
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// Get business information (public)
app.get('/api/business/:slug', (req, res) => {
  try {
    const business = getBusinessBySlug(req.params.slug);
    if (!business) {
      return res.status(404).json({ error: 'Business not found' });
    }
    
    // Return only public information
    const publicInfo = {
      slug: business.slug,
      name: business.name,
      description: business.description,
      phone: business.phone,
      email: business.email,
      address: business.address,
      website: business.website,
      hours: business.hours,
      maps_url: business.maps_url,
      logo_url: business.logo_url,
      primary_color: business.primary_color,
      secondary_color: business.secondary_color,
      welcome_message: business.welcome_message
    };
    
    res.json(publicInfo);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Initialize chat session
app.post('/api/chat/init', (req, res) => {
  try {
    const { businessSlug } = req.body;
    
    const business = getBusinessBySlug(businessSlug);
    if (!business) {
      return res.status(404).json({ error: 'Business not found' });
    }
    
    const userIp = req.ip || req.connection.remoteAddress;
    const userAgent = req.get('User-Agent') || '';
    
    const sessionId = createSession(business.id, userIp, userAgent);
    const token = createSessionToken(business.id, sessionId);
    
    res.json({ 
      sessionToken: token,
      business: {
        name: business.name,
        welcomeMessage: business.welcome_message,
        primaryColor: business.primary_color
      }
    });
    
  } catch (error) {
    console.error('Error initializing session:', error);
    res.status(500).json({ error: 'Failed to initialize chat session' });
  }
});

// Send message
app.post('/api/chat/message', verifySessionToken, async (req, res) => {
  try {
    const { message } = req.body;
    const { businessId, sessionId } = req.session;
    
    if (!message || message.trim().length === 0) {
      return res.status(400).json({ error: 'Message cannot be empty' });
    }
    
    const business = getBusinessById(businessId);
    if (!business) {
      return res.status(404).json({ error: 'Business not found' });
    }
    
    // Analyze message
    const intent = aiSystem.analyzeIntent(message);
    const sentiment = aiSystem.analyzeSentiment(message);
    
    // Retrieve relevant chunks
    const relevantChunks = await aiSystem.retrieveRelevantChunks(businessId, message);
    
    // Get session history
    const history = getSessionHistory(sessionId, 6);
    
    // Generate AI response
    const aiResponse = await aiSystem.generateResponse(business, message, history, relevantChunks);
    
    // Save messages
    saveMessage(sessionId, businessId, 'user', message, intent, sentiment, 0.8, relevantChunks.map(c => c.id));
    saveMessage(sessionId, businessId, 'assistant', aiResponse);
    
    // Generate suggestions
    const suggestions = aiSystem.generateSuggestions(intent, business);
    
    // Check if we should show contact form
    const showContactForm = aiSystem.shouldShowContactForm(intent, message);
    
    res.json({
      response: aiResponse,
      suggestions,
      showContactForm,
      intent,
      sentiment
    });
    
  } catch (error) {
    console.error('Error processing message:', error);
    res.status(500).json({ 
      response: "I'm sorry, I'm having technical difficulties. Please try again or contact us directly.",
      suggestions: ['Try again', 'Contact us', 'Get help']
    });
  }
});

// Capture lead
app.post('/api/lead/capture', verifySessionToken, async (req, res) => {
  try {
    const { name, email, phone, interest, budget, timeline, message } = req.body;
    const { businessId, sessionId } = req.session;
    
    if (!name || !email) {
      return res.status(400).json({ error: 'Name and email are required' });
    }
    
    const business = getBusinessById(businessId);
    if (!business) {
      return res.status(404).json({ error: 'Business not found' });
    }
    
    const leadData = { name, email, phone, interest, budget, timeline, message };
    const leadId = createLead(businessId, sessionId, leadData);
    
    // Update session with user info
    updateSession(sessionId, {
      user_name: name,
      user_email: email,
      user_phone: phone || ''
    });
    
    // Send email notification
    }
    
    res.json({
      success: true,
      leadId,
      message: `Thank you ${name}! We've received your information and will get back to you soon.`
    });
    
  } catch (error) {
    console.error('Error capturing lead:', error);
    res.status(500).json({ error: 'Failed to save your information. Please try again.' });
  }
});

// End chat session
app.post('/api/chat/end', verifySessionToken, async (req, res) => {
  try {
    const { userInfo } = req.body;
    const { businessId, sessionId } = req.session;
    
    const business = getBusinessById(businessId);
    }
    
    updateSession(sessionId, { 
      ended_at: new Date().toISOString(),
      session_duration_minutes: Math.floor((Date.now() - new Date(req.session.started_at || Date.now())) / (1000 * 60))
    });
    
    res.json({ success: true });
    
  } catch (error) {
    console.error('Error ending session:', error);
    res.json({ success: false });
  }
});

// Admin Routes

// Create business
app.post('/admin/business/create', async (req, res) => {
  try {
    const businessData = req.body;
    
    if (!businessData.slug || !businessData.name) {
      return res.status(400).json({ error: 'Business slug and name are required' });
    }
    
    // Check if slug already exists
    const existing = getBusinessBySlug(businessData.slug);
    if (existing) {
      return res.status(409).json({ error: 'Business slug already exists' });
    }
    
    const result = createBusiness(businessData);
    const business = getBusinessBySlug(businessData.slug);
    
    const protocol = req.headers['x-forwarded-proto'] || req.protocol;
    const host = req.get('host');
    const baseUrl = `${protocol}://${host}`;
    
    res.json({
      success: true,
      business,
      urls: {
        chatUrl: `${baseUrl}/chat/${business.slug}`,
        adminUrl: `${baseUrl}/admin/business/${business.slug}`,
        apiEndpoint: `${baseUrl}/api/business/${business.slug}`
      },
      apiKey: result.api_key
    });
    
  } catch (error) {
    console.error('Error creating business:', error);
    res.status(500).json({ error: 'Failed to create business' });
  }
});

// Upload business files
app.post('/admin/business/:slug/upload', upload.array('files', 10), async (req, res) => {
  try {
    const { slug } = req.params;
    const business = getBusinessBySlug(slug);
    
    if (!business) {
      return res.status(404).json({ error: 'Business not found' });
    }
    
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ error: 'No files uploaded' });
    }
    
    const results = [];
    
    for (const file of req.files) {
      try {
        // Process file
        const ext = path.extname(file.originalname).slice(1).toLowerCase();
        const content = await FileProcessor.processFile(file.path, ext, file.originalname)[1] || path.extname(file.originalname).slice(1), file.originalname);
        
        // Categorize content
        const category = FileProcessor.categorizeContent(content, file.originalname);
        
        // Save document
        const documentId = saveDocument(
          business.id,
          file.filename,
          file.originalname,
          file.mimetype,
          file.size,
          content,
          category
        );
        
        // Create chunks and embeddings
        const chunks = FileProcessor.chunkText(content);
        let chunkCount = 0;
        
        for (let i = 0; i < chunks.length; i++) {
          const chunk = chunks[i];
          const keywords = FileProcessor.extractKeywords(chunk);
          
          try {
            const embedding = await aiSystem.createEmbedding(chunk);
            saveChunk(business.id, documentId, i, chunk, embedding, category, keywords);
            chunkCount++;
          } catch (embeddingError) {
            console.error(`Error creating embedding for chunk ${i}:`, embeddingError);
          }
        }
        
        results.push({
          filename: file.originalname,
          status: 'success',
          chunks: chunkCount,
          category,
          size: file.size
        });
        
        // Clean up uploaded file
        await fs.unlink(file.path).catch(() => {});
        
      } catch (fileError) {
        console.error(`Error processing file ${file.originalname}:`, fileError);
        results.push({
          filename: file.originalname,
          status: 'error',
          error: fileError.message
        });
        
        // Clean up uploaded file
        await fs.unlink(file.path).catch(() => {});
      }
    }
    
    const successCount = results.filter(r => r.status === 'success').length;
    const totalChunks = results.reduce((sum, r) => sum + (r.chunks || 0), 0);
    
    res.json({
      success: true,
      message: `Processed ${successCount}/${req.files.length} files successfully`,
      totalChunks,
      results
    });
    
  } catch (error) {
    console.error('Error uploading files:', error);
    res.status(500).json({ error: 'Failed to process uploaded files' });
  }
});

// Get business analytics
app.get('/admin/business/:slug/analytics', (req, res) => {
  try {
    const { slug } = req.params;
    const { days = 30 } = req.query;
    
    const business = getBusinessBySlug(slug);
    if (!business) {
      return res.status(404).json({ error: 'Business not found' });
    }
    
    const analytics = getBusinessAnalytics(business.id, parseInt(days));
    
    res.json({
      business: {
        name: business.name,
        slug: business.slug
      },
      period: `${days} days`,
      analytics
    });
    
  } catch (error) {
    console.error('Error fetching analytics:', error);
    res.status(500).json({ error: 'Failed to fetch analytics' });
  }
});

// List all businesses
app.get('/admin/businesses', (req, res) => {
  try {
    const businesses = getAllBusinesses();
    res.json(businesses);
  } catch (error) {
    console.error('Error fetching businesses:', error);
    res.status(500).json({ error: 'Failed to fetch businesses' });
  }
});

// Get business documents
app.get('/admin/business/:slug/documents', (req, res) => {
  try {
    const { slug } = req.params;
    const business = getBusinessBySlug(slug);
    
    if (!business) {
      return res.status(404).json({ error: 'Business not found' });
    }
    
    const documents = getBusinessDocuments(business.id);
    res.json(documents);
    
  } catch (error) {
    console.error('Error fetching documents:', error);
    res.status(500).json({ error: 'Failed to fetch documents' });
  }
});

// Serve chat interface
app.get('/chat/:slug', (req, res) => {
  res.sendFile(path.resolve(__dirname, 'public/chat.html'));
});

// Error handling middleware
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ error: 'File too large. Maximum size is 10MB.' });
    }
    return res.status(400).json({ error: error.message });
  }
  
  console.error('Unhandled error:', error);
  res.status(500).json({ error: 'Internal server error' });
});

// Start server
const server = app.listen(PORT, () => {
  console.log(`\n🚀 Business Chatbot System running on http://localhost:${PORT}`);
  console.log(`📊 Admin Dashboard: http://localhost:${PORT}/admin`);
  console.log(`💬 Chat Interface: http://localhost:${PORT}/chat/your-business-slug`);
  console.log(`📋 Setup Guide: http://localhost:${PORT}/admin/setup.html`);
  console.log(`\n✨ Features enabled:`);
  console.log(`   📄 File uploads: PDF, CSV, Excel, Text, Word`);
  console.log(`   🤖 AI-powered conversations`);
  console.log(`   🎯 Lead capture and analytics`);
  console.log(`   🌐 Unique URLs for each business`);
});

process.on('SIGTERM', () => {
  console.log('\n🛑 Shutting down gracefully...');
  server.close(() => {
    console.log('✅ Server closed');
    process.exit(0);
  });
});
